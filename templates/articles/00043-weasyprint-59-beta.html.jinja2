{% extends '_layout.jinja2' %}

{% block content %}
  <article>
    <header>
      <h2>WeasyPrint v59: Beta Time</h2>
      <aside><time datetime="2023-02-03">April 12, 2023</time>, by liZe</aside>
      <p>
        WeasyPrint v59 is the next major version of WeasyPrint.
        We released a <a href="https://github.com/Kozea/WeasyPrint/releases/tag/v59.0b1">beta</a>,
        you can give it a try and help us to have a nice stable major release!
        The major improvement in this version is a much smaller size of generated PDFs.
      </p>
    </header>

    <section>
      <p>
        <em>
          PDFs are now smaller thanks to the financial support of
          <a href="https://www.codeandco.com/">Code‚ÄØ&amp;‚ÄØCo.</a> It has been
          a real pleasure to develop this feature with them.
        </em>
      </p>
      <p>
        <em>
          We would also like to thank <code>@suvtur</code> for his great ideas
          to reduce the size of embedded images.
        </em>
      </p>
      <p>
        <em>
          You would love to get a new feature, a bug fix, or some support on
          WeasyPrint? Don‚Äôt hesitate to
          <a href="{{ url_for('page', _anchor="support") }}">get in touch with us</a>! Or if you
          simply want to see the project grow beautifully, you can donate on
          <a href="https://opencollective.com/courtbouillon">OpenCollective</a> üòâ.
        </em>
      </p>
    </section>

    <section>
      <h3>Smaller PDFs?</h3>

      <p>
        Reducing the size of PDFs is an important feature for WeasyPrint‚Äôs users, according to
        <a href="{{ url_for('page', article='00033-two-years-of-courtbouillon') }}">the 2-year survey</a>.
        It saves some disk space when documents are archived, it reduces
        download times for documents generated by web applications, it avoids
        problems when the size is limited, for example for mail attachments.
      </p>
      <p>
        When <a href="https://www.codeandco.com/">Code‚ÄØ&amp;‚ÄØCo.</a> contacted
        us to reduce the size of our documents, we were excited to find a
        solution to reach this goal. Great news, but‚Ä¶ how can we reduce the
        size of our PDFs? Is it even possible?
      </p>
      <p>
        We already had two main ideas: optimize images and remove useless
        content. And finally, a third one we didn‚Äôt think of was even better‚Ä¶
        Which one? Let‚Äôs go through the whole process to find out!
      </p>

      <h4>Images</h4>
      <p>
        Optimizing images is maybe the most obvious solution when we want to
        save space. In some documents, images are by far the biggest content,
        and finding ways to optimize them can lead to very interesting results.
      </p>
      <p>
        Some optimizations are lossless, allowing users to get exactly the same
        rendering while saving some space. Such an option already exists in
        WeasyPrint: using the <code>-O images</code> asks
        <a href="https://pillow.readthedocs.io/">Pillow</a> to generate smaller
        images if possible. Let‚Äôs trust Pillow for this, there‚Äôs probably
        nothing more we can do.
      </p>
      <p>
        Other optimizations are lossy. Reducing the image size or the image
        quality is a great way to get smaller files, even if the overall
        rendering may be slightly worst. In situations when the document‚Äôs size
        is more important than its quality, it could be interesting for users
        to have this possibility.
      </p>
      <p>
        Thanks to good ideas proposed by <code>@suvtur</code>, we now have two
        more options: <code>--jpeg-quality</code> that can reduce the
        <a href="https://en.wikipedia.org/wiki/JPEG#Compression_ratio_and_artifacts">compression ratio of JPEG images</a>
        and <code>--dpi</code> that reduces the width and height of images to
        reach a maximum given resolution.
      </p>

      <h4>Useless Data</h4>
      <p>
        The second step of our journey was to try removing useless data.
        Because, let‚Äôs be honest, we do store useless data in our PDFs.
      </p>
      <p>
        Now that we use <a href="https://www.courtbouillon.org/pydyf">pydyf</a>,
        our own PDF generator, we have more flexibility about how PDF objects
        are stored. The PDF format gives a lot possibilities to remove some
        characters (some spaces, for example) without changing the actual
        structure (and the actual text) of the document. Of course, we didn‚Äôt
        want to sacrifice the readability of our documents to save a few bytes:
        it‚Äôs actually interesting to read them for debugging purpose, even if
        it sometimes gives the impression to be in the Matrix! Nevertheless, we
        found
        <a href="https://github.com/CourtBouillon/pydyf/commit/0b9ec31c3a0e22595f6a78f5f6e75357293b04c2">two very common cases</a>
        where removed spaces could save quite a lot of kilobytes with exactly
        the same PDF structure.
      </p>
      <p>
        Some spaces are "useless" in code, most developers know that, and
        that‚Äôs true for PDF objects too. But during our journey, we‚Äôve also
        found that some spaces are useless in the real PDF text! As strange as
        it may seem, PDF readers don‚Äôt really rely on space characters to
        determinate the words boundaries. Many of them are actually impossible
        to select‚Ä¶ and that‚Äôs a shame for Python code! So,
        <a href="https://github.com/Kozea/WeasyPrint/pull/1853/commits/6b82aec1031198b1acd23c11bbc5c3c9f82efd8a">we can safely remove spaces when they‚Äôre alone in their lines</a>,
        and remove a few extra kilobytes from our PDFs.
      </p>
      <p>
        We won‚Äôt go through all the successful (zeros at the right of decimal
        numbers‚Ä¶) and less successful (use ASCII characters instead of
        hexadecimal codes‚Ä¶) tries, but you get the idea!
      </p>

      <h4>Let‚Äôs Change the PDF Structure</h4>
      <p>
        Optimizing images can give impressive results, but it often alters the
        quality of generated documents. Removing useless data doesn‚Äôt change
        anything for users, but the size it saves is not as high as we can
        hope. Can we do better?
      </p>
      <p>
        Yes, we can. The version 1.5 of the PDF specification introduces
        "object streams", a type of PDF object that can group other objects.
        Why is that useful? Because the content of PDF streams can be
        compressed, while normal objects can‚Äôt. Do our PDFs contain a lot of
        objects that can be grouped and compressed in object streams?
      </p>
      <p>
        Of course, it depends. But even with a small number of objects, object
        streams are really useful: PDF objects are mainly composed of
        repetitive ASCII characters, that‚Äôs exactly when compression is really
        effective!
      </p>
      <p>
        Objects that can be grouped in object streams are mainly metadata.
        Among metadata, one type is particularly interesting: links. Internal
        (reaching a specific position in the current PDF) or external (URLs
        open in a web browser), they mainly contain repetitive text and
        numbers. Moreover, many documents include <em>a lot</em> of links:
        tables of contents, hyperlinks, headers, footers‚Ä¶
      </p>

      <h4>Results</h4>
      <p>
        Obviously, the results are very different for different documents. But
        in the end, was it worth the effort?
      </p>
      <p>
        Short answer: yes, it was.
      </p>
      <p>
        For some documents, the results can be really impressive. For our
        <a href="https://kozea.github.io/WeasyPerf/samples/html5/html5.html">HTML5 sample document</a>,
        the generated PDF loses 80% of its size, from 1,449‚ÄØkB to 290‚ÄØkB, without any data loss! üöÄ
      </p>
      <p>
        If you have documents with a lot of images, you can also get equivalent
        results. Lossless and lossy optimizations, if you don‚Äôt mind losing a
        little bit of rendering quality, can have a huge impact on the results.
        If you don‚Äôt want to spend time to manually optimize your images, you
        can now let WeasyPrint do this for you!
      </p>
    </section>

    <section>
      <h3>What Are the Next Steps?</h3>

      <p>
        The next step is yours! Don‚Äôt hesitate to try this beta and report bugs you
        may find üêû.
      </p>
      <p>
        The one after is to fix the reported bugs and release a nice WeasyPrint
        version 59.
      </p>
      <p>
        Have fun with this
        <a href="https://github.com/Kozea/WeasyPrint/releases/tag/v59.0b1">beta</a>‚ÄØüíú.
      </p>
    </section>
  </article>
{% endblock content %}

{% set title = 'Blog - The Python packaging hell: the bag of knots' %}
{% set description = 'Managing Python packaging can sometimes be a nightmare. You donâ€™t know what we are talking about? We show you a couple of things and we talk again afterâ€¦' %}

{% extends '_layout.jinja2' %}

{% block content %}

  <article>
    <header>
      <h2>The Python packaging hell: the bag of knots (1â€¯/â€¯7)</h2>
      <aside><time datetime="2021-09-16">September 16, 2021</time>, par CourtBouillon</aside>
      <p>
        Managing Python packaging can sometimes be a nightmare. You donâ€™t know 
        what we are talking about? We show you a couple of things and we talk 
        again afterâ€¦
      </p>
    </header>

    {% include 'articles/_python_contents.jinja2' %}

    <section>
      <h3>What is the problem?</h3>
      <p>
        If you are here, we assume that you already have done a bit of Python. 
        You already have installed a Python project, with dependencies. And to 
        do that, you may have to do some stuff. A lot of stuff. Way to more stuff.
        Not so much? We bet that you have already encountered things calling 
        <code>pip</code>, <code>pipenv</code>, <code>poetry</code>,
        <code>setuptools</code>, <code>distutils</code>,
        <code>requirements.txt</code>, <code>setup.py</code>,
        <code>Pipfile</code>, <code>setup.cfg</code>,
        <code>pyproject.toml</code>, <code>venv</code>,
        <code>virtualenv</code>, <code>wheel</code>â€¦ We stop here, but you know 
        many more, without realizing.
      </p>
      <p>
        Thatâ€™s too much, and itâ€™s not normal.
      </p>
      <figure>
        <img src="{{ url_for('static', filename='images/00011-xkcd.png') }}" alt="Mandatory Related XKCDâ„¢" title="The Python environmental protection agency wants to seal it in a cement chamber, with pictoral messages to future civilizations warning them about the danger of using sudo to install random Python packages." />
        <figcaption>
          Mandatory related <a href="https://xkcd.com/1987/">XKCD</a>
        </figcaption>
      </figure>
      <p>
        A sentence from 
        <a href="https://www.python.org/dev/peps/pep-0020/">The Zen of Python</a>
        says Â«â€¯There should be oneâˆ’ and preferably only one
        âˆ’obvious way to do itâ€¯Â». Now, the problem, you see it?
      </p>
    </section>

    <section>
      <h3>The horror of the beginnings</h3>
      <p>
        You may not remember, but at some point you didnâ€™t know about Python. 
        Yes, we assure you.
      </p>
      <p>
        Try to explain to someone being at ease behind a keyboard (but who 
        doesnâ€™t know Python) how to install a Pythom program. In its place, as 
        a regular neophyte of the XXI<sup>e</sup> century, we would except 
        something like:
      </p>
      <ol>
        <li>
          Install Python by following the super short tutorial from the super 
          documentation or with the command 
          <code>download-python-and-install-it</code>.
        </li>
        <li>
          Install the program by clicking here, or with the command 
          <code>python-install my-program</code>.
        </li>
      </ol>
      <p>
        Sorry to break your dreams: itâ€™s not like that. Really not at all. 
        The "super short tutorial from the super documentation" to install 
        Python doesnâ€™t exist. And way to many <code>python-install</code> 
        programs exist, all incompatible with each other, none of them comes with 
        Python, which makes installing a program unpleasant.
      </p>
      <p>
        Yeah: ðŸ¤¦. We agree.
      </p>

      <h4>Wow, such tuto</h4>
      <p>
        If we speak about tutorials, the best source is, with no doubt, around 
        here 
        <a href="https://python-guide-fr.readthedocs.io/fr/latest/starting/installation.html">The Hitchhikerâ€™s Guide to Python</a>.
        There is always a lot to say about documentation, but to bring a touch 
        of optimism: the guide is translated in several language, and at some 
        parts really well done and rather didactic.
      </p>
      <figure>
        <img src="{{ url_for('static', filename='images/00011-old-guy.jpg') }}" alt="Hide the Pain Harold" title="Ã‡a fait 4 jours que jâ€™essaie dâ€™installer un paquet." />
        <figcaption>
          "So, you see, you canâ€™t use f-strings with your virtualenv because 
          itâ€™s using Python 2â€¯Â»
        </figcaption>
      </figure>
      <p>
        We wonâ€™t talk about the fact that it is not the official documentation. 
        Nor the fact that all the guide is a not-well-hidden ad for the glory of 
        the projects of its arguable author. No, do not insist, we wonâ€™t do that.
      </p>
      <p>
        Problem: this tutorial is not short, not simple. You are usingg macOS? 
        Here the first paragrphs:
      </p>
      <blockquote>
        Before installing Python, youâ€™ll need to install GCC. GCC can be 
        obtained by downloading Xcode, the smaller Command Line Tools (must 
        have an Apple account) or the even smaller OSX-GCC-Installer package.
      </blockquote>
      <p>
        We save you from the hell ðŸ”¥ of the installation on Windows, where a 
        demonic list of solutions more or less wobbly exists. Python is 
        in the Store 
        (that is <a href="https://www.microsoft.com/fr-fr/search?q=python">what Microsoft says</a>), 
        in Chocolaty 
        (that is <a href="https://docs.python-guide.org/starting/install3/win/"> what 
        Hitchhikerâ€™s Guide says in english</a>, but 
        <a href="https://python-guide-fr.readthedocs.io/fr/latest/starting/install/win.html">not in all languages</a>), 
        on <code>python.org</code> 
        (that is <a href="https://www.python.org/downloads/windows/">what <code>python.org</code>says</a>, 
        but <a href="https://docs.python.org/3/tutorial/interpreter.html"> not its documentation</a>).
      </p>
      <p>
        What is the best solution? We donâ€™t know. In fact there is none. And 
        thatâ€™s very bad.
      </p>

      <h4>Wow, such installer</h4>
      <p>
        Ok, the first point was kind of a disaster. Butâ€¦ Maybe we can do better 
        on the second on? Install a package after installing Python should be a 
        childâ€™s play. We do <code>pip install my-package</code>, no?
      </p>
      <p>
        No.
      </p>
      <p>
        Maybe <code>sudo pip install my-package</code>, no?
      </p>
      <p>
        No. No. No. No. No. No. No. No.
      </p>
      <p>
        To install a package, you nedd to create a virtualenv, but in fact not 
        always. To create a virtualenv, we are going to use a module
        <a href="https://docs.python.org/3/tutorial/venv.html">integrated in Python</a>
        but
        <a href="https://packages.ubuntu.com/search?keywords=python3-venv">in fact not always</a>.
        And after we are going to use a program 
        <a href="https://docs.python.org/3/tutorial/venv.html?highlight=pip#managing-packages-with-pip">integrated in Python</a>
        but
        <a href="https://packages.ubuntu.com/search?keywords=python3-pip">in fact not always</a>.
        And after the package can be installed, but 
        <a href="https://github.com/pypa/pip/issues">in fact not always</a>.
      </p>
      <p>
        If you do not want to complicate things, you can follow 
        <a href="https://docs.python-guide.org/dev/virtualenvs/#installing-pipenv">that what the Hitchhikerâ€™s Guide says</a>
        and use Pipenv (we let you guess who create this wonderful tool). Of 
        course you have to disregard the fact that Pipenv has been deserted by 
        a year and a half with a broken version and no update. Of course, you 
        have to turn a blind eye to the fact that the project is sprawling, 
        include about fourty duplicated projects and sometimes modified, and the 
        fact that is more than 200.000 lines of code ðŸ˜±â€¦
      </p>
      <p>
        Hahahahahahaha. Haha. No.
      </p>
    </section>

    <section>
      <h3>The loneliness of package creation</h3>
      <p>
        All of that, it is just when we install a package. If you want to create 
        and share a package, summon up your patience, expect other suprises.
      </p>
      <figure>
        <img src="{{ url_for('static', filename='images/00011-jack.jpg') }}" alt="Devil in box" title="It is scary." />
        <figcaption>Everytime you think you close the bad news box, it opens without any warning</figcaption>
      </figure>
      <p>
        Letâ€™s be honest: 
        <a href="https://packaging.python.org/tutorials/packaging-projects/"> a tutorial</a> 
        and 
        <a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/">a guide</a>
        exist to learn how to create packages. These documents are rather well 
        written and should quickly help you to share your library. In theory, we 
        are taken by hand. In theory.
      </p>
      <p>
        In reality, things are way more chaotic. If we look only three projecs like 
        <a href="https://github.com/pallets/flask">Flask</a>,
        <a href="https://github.com/psf/requests">Requests</a> and
        <a href="https://github.com/numpy/numpy">NumPy</a>, we have a long list 
        of files more or less related to package managment, without counting the 
        classics <code>README</code>, <code>LICENSE</code> and others:
      </p>
      <ul>
        <li><code>setup.py</code>,</li>
        <li><code>setup.cfg</code>,</li>
        <li><code>MANIFEST.in</code>,</li>
        <li><code>Pipfile</code>,</li>
        <li><code>Pipfile.lock</code>,</li>
        <li><code>tox.ini</code>,</li>
        <li><code>pytest.ini</code>,</li>
        <li><code>.coveragerc</code>,</li>
        <li><code>requirements.txt</code>,</li>
        <li><code>pyproject.toml</code>â€¦</li>
      </ul>
      <p>
        The bad news is, Python does not provide tool to create a new project 
        ready to by share. You are going to be lost in third-party projects which 
        do that in their own way (we still looking askance at you, Pipenv), or 
        you are going to learn the hard way what these weird files be of.
      </p>
      <p>
        (Small funny note: <code>setup.py</code>, <code>setup.cfg</code>,
        <code>requirements.txt</code> and <code>pyproject.toml</code> all four 
        allow, among others, to list the dependencies of a project. They use 4 
        different formats, one of them is not event manage by the Python 
        standard library.)
      </p>
      <p>
        The differents tutorials and online forums will only give you fragmented 
        informations and often obsolete. And with good reason: good practices 
        are always changing. 
        These tools have been often developed without specifications, with 
        documentation at best incomplete (we are really thinking about you, 
        <code>setuptools</code>). The all world suggest ideas, new tools 
        regularly appear, everything quickly looks like a fashion moment which 
        becomes outmoded after few years (even few months if you are unlucky)â€¦
      </p>
      <p>
        We ear you defending your beloved language "Yes, but it is not complicated,
        all that, blah blah blah blahâ€¦". Do you want to cry? Go on 
        <a href="https://doc.rust-lang.org/cargo/">Cargo documentation</a>, the 
        package manager for Rust.
        <a href="https://doc.rust-lang.org/cargo/getting-started/installation.html">The first page</a>
        is the installation page, it contains 136 words (according to <code>wc</code>), 
        including commands. It allows to install Rust, with Cargo. 136 words, 
        it is one less than the Zen of Python. For real.
      </p>
      <p>
        <a href="https://doc.rust-lang.org/cargo/getting-started/first-steps.html">The second page</a>
        gives everything needed to create a simple package, with a tool that 
        create all the files. It contains the source code, the metadata file, 
        the commands used and their results, a files and folders tree in ASCII-art. 
        Everything in 183 words.
      </p>
      <p>
        There we are. It is possible. You know it now.
      </p>
    </section>

    <section>
      <h3>And after?</h3>
      <p>
        With Python, you are going to learrn things at random from your online 
        reading, on doubtful blogs like this one. You are going to find 
        solutions on StackOverflow absolutly outdated, tricks unspecified using 
        implementation details which will change next week. 
        Do we include tests in the package, or not? Do we put them in the module, 
        or not? Do we supply a source package, or not? Do we indicate exact 
        versions of the dependencies, or not? Do we put the documentation in a 
        folder aside, or not? So many questions, and many more, for which you 
        are in the deeply loneliness of packages creation.
      </p>
      <p>
        You probably tell yourself that everything is lost, that people who 
        developped everything are incompetent, that Python is in fact a rotten 
        and beyond repair languageâ€¦ Yet, no. We will try in the next episodes to 
        understand how we got there and how things change during all those years, 
        and often for the best. Do we, one day, succeed to create a nice package? 
        Of course.
      </p>
      <p>
        Forthcomingâ€¦
      </p>
    </section>
  </article>

{% endblock content %}

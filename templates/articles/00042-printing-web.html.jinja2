{% extends '_layout.jinja2' %}

{% block content %}
  <article>
    <header>
      <h2>Printing the Web</h2>
      <aside><time datetime="2023-04-06">April 6, 2023</time>, by CourtBouillon</aside>
      <p>
        Everyday we work with web technologies, but our work is a bit different from a
        lot of people: we don‚Äôt create websites. Our HTML and CSS aren‚Äôt displayed on
        web browsers, but transformed into PDF files.
      </p>
    </header>

    <section>
      <p>
        <em>
          This article <a href="https://www.24joursdeweb.fr/2022/mettre-le-web-en-pages/">was
          originally published in French</a> for the "24 jours de web" advent calendar.
        </em>
      </p>
    </section>

    <section>
      <h3>A Small Introduction</h3>

      <p>
        We are Lucie and Guillaume, and like many people, everyday we work with web technologies.
      </p>
      <p>
        Like many people, we like to create nice HTML structures to insert our content. Like many
        people, we like to paint nice colors and build nice structures with our CSS.
      </p>
      <p>
        But our work is a bit different from a lot of people: we don‚Äôt create websites. Our HTML and CSS
        aren‚Äôt displayed in web browsers. It‚Äôs transformed into PDF files to be printed,
        read on smartphones or computers, or simply archived.
      </p>
      <p>
        In other words: we literally print the web.
      </p>
      <p>
        How? Why? We‚Äôre going to see in detail that this idea isn‚Äôt as strange as it may look‚Ä¶
      </p>
    </section>

    <section>
      <h3>A Bit of History</h3>

      <h4>Weaknesses of Classic Tools</h4>
      <p>
        Let‚Äôs be honest: using HTML and CSS to create PDF files wasn‚Äôt our first idea.
        There is a ton of tools to create beautiful documents, from Microsoft Word to LaTeX,
        from LibreOffice Writer to Google Docs, Adobe InDesign‚Ä¶ These applications are
        generally enough to meet a large list of needs, from the simple letter written in
        two minutes to the magazine ready to be printed.
      </p>
      <p>
        However, there is a need for which these tools aren‚Äôt really made for: automatic document generation.
      </p>
      <p>
        Let‚Äôs say that you have a online shop. You like creating amazing ceramic bowls‚ÄØü•£Ô∏è and
        the whole world can see them on your website. Customers love what you do and you quickly sell
        dozens and dozens of bowls. Congrats! Users fill their basket, enter their credit card number
        to pay, and‚Ä¶ they‚Äôd like to have an invoice.
      </p>
      <p>
        Hmm‚Ä¶ You‚Äôre not going to write all these invoices by hand! The layout is always the same, but the
        content changes a bit: name, price, address‚Ä¶ How can we do this?
      </p>

      <figure>
        <img src="{{ url_for('static', filename='images/00042-invoices-thumbnail.jpg') }}" alt="An invoice" title="Your invoices are as pretty as your bowls!" />
        <figcaption>
          Your invoices are as pretty as your bowls!
        </figcaption>
      </figure>
      
      <p>
        The same question comes if you have an online business cards creation site, where you‚Äôd like
        your customers to choose among different styles, in which they may change colors, fonts or logos.
        Same if you‚Äôd like to generate promotional flyers or electronic labels for your shop.
        Same again if you‚Äôd like to print diplomas, school reports or schedules.
      </p>

      <p>
        Anyway, you get the idea üòÅÔ∏è.
      </p>

      <p>
        <strong>That‚Äôs when the idea of using web technologies to generate printable documents comes up.</strong>
      </p>

      <p>
        After all, in each of these cases, we have to generate a document with a well-defined structure and layout.
        To print content coming from a database, HTML has nothing left to prove. You can use whatever tools, frameworks,
        libraries and languages you want to create the pages you need. And to lay out this HTML, what‚Äôd be better than CSS?
        You can create one or more stylesheets depending on your desires, you can even customize them with variables or
        pre-processors (like <a href="https://sass-lang.com/">Sass</a>) if you‚Äôd like to.
      </p>

      <p>
        Alright, we see how this works to display websites on browsers. But for a paged document, honestly,
        wouldn‚Äôt that be far-fetched?
      </p>

      <h4>The Strengths of Web Technologies</h4>
      <p>
        Actually, and as surprising as it may be, it‚Äôs not. And not only to generate some invoices for your cute bowls.
        There is a high probability that you have in your library a book that has been made with HTML/CSS! Publishers are often
        discreet on the technologies they use, but some like <a href="https://www.xml.com/articles/2017/02/20/beyond-xml-making-books-html/">Hachette</a> talk about them.
        Real books made with HTML/CSS, sold to real customers, without anyone knowing!
      </p>
      <p>
        So, if big publishers use these technologies "for real", that can work for other, can‚Äôt it?
      </p>

      <p>
        It‚Äôs not the product of chance‚Ä¶ It‚Äôs time to dig a little, let‚Äôs go back to 1996.
        The IT world only speaks about Windows 95, the new Microsoft operating system, which doesn‚Äôt even
        have a default browser. 90% of Internet users (which are not very numerous) use Netscape, which
        will integrate this year a hastly-created language: JavaScript.
      </p>
      <p>
        In 1996 is also published the <a href="https://www.w3.org/TR/WD-CSS2-971104/cover.html">first CSS2 specification</a>.
        To build an open and interoperable standard, the W3C writes a document that‚Äôs still a reference more than 25 years after.
        In this document, we can find a clear definition of the syntax, selectors, and a lot of basic properties we still use
        today. But that‚Äôs not all‚Ä¶
      </p>
      <p>
        You can find in it a <a href="https://www.w3.org/TR/WD-CSS2-971104/page.html#h-12.1">whole chapter about paged documents generation</a>.
      </p>
      <p>
        CSS creators like to think outside the box. They didn‚Äôt design the specification for PC and Mac cathode ray screens of 1996 only,
        and not just for mice and keyboards. They already think about
        displaying websites on TVs, Braille pads, portable devices (the first iPhone will be released more than 10 years after),
        reading their content with voice synthesizers‚Ä¶ or, of course, printing documents.
      </p>
      <p>
        If the idea is praiseworthy (and absolutely visionary), but it brings many concrete issues.
        Automatically cutting a web document into several pages with a fixed size has specific
        issues, and CSS2 covers only a portion of it: forcing or avoiding page breaks, adding
        page margins and inserting page numbers, defining a format for printing.
        It‚Äôs a good start but it‚Äôs not enough. Without us being aware of it, tons of printed documents
        teem with details that we need to take care of to get a quality layout.
      </p>
    </section>

    <section>
      <h3>In Practice</h3>

      <p>
        So, what‚Äôs it like to print the web?
      </p>
      <p>
        When we create a document, whether it‚Äôs a letter, a poster, a book or something else,
        we have a lot of choices. For example, the format: will my document will be printed on
        A4 pages, A6, on 15cm‚ÄØ√ó‚ÄØ24cm sheets, portrait or landscape? That‚Äôs something that is
        easily doable in CSS. Let‚Äôs choose A4 format:
      </p>

      {{ '00042-at-page.css' | pygmentize }}

      <p>
        That was quite easy!
      </p>
      <p>
        Did you notice that, on documents with several pages, margins are often different
        on left and right pages, and that page numbers aren‚Äôt always
        on the same side? This too is easily doable in CSS:
      </p>

      {{ '00042-left-right.css' | pygmentize }}

      <p>
        You got the idea, <strong>CSS can deal with these issues for web and paged documents</strong>.
        Let‚Äôs try with other issues more specific to documents ü§Ø!
      </p>

      <figure>
        <img src="{{ url_for('static', filename='images/00042-book.jpg') }}" alt="Photo of an opened book" title="Books are beautiful" />
        <figcaption>
          Books are beautiful
        </figcaption>
      </figure>

      <p>
        Do you see what leaders are? These little points you find on table of contents, linking
        chapter titles to their page numbers. Alright, it‚Äôs not always little points, but you get the idea.
        This is also doable with CSS:
      </p>

      {{ '00042-leaders.css' | pygmentize }}

      <p>
        It seems to be a bit complex, but let‚Äôs have a closer look.
      </p>
      <p>
        <code>target-counter()</code> gets the number of the page on which the chapter starts.
        <code>leader()</code> is the main character of our table of contents: this function
        (yes, there are functions in CSS) will draw the little points between the chapter name and
        its page number. Each line will have the right amount of points depending the space available,
        and the points of all lines will be perfectly aligned: <code>leader()</code> does things nicely.
      </p>
      <p>
        We won‚Äôt have a tour of all the possibilities, but CSS is full of features and
        properties that help us to create documents with a lot of details. Whether you want to allow or prevent
        page breaks inside blocks, whether you like to insert footnotes, text on multi-columns,
        or something else, you can often find a way to achieve it.
      </p>

      <p>
        <strong>
          By creating documents with HTML/CSS, you benefit from all the specific features for paged documents
          already managed by CSS, but you also benefit from all the power of CSS that you already use
          for your websites!
        </strong>
      </p>

      <p>
        As we included some CSS samples in this article, we used them to generate
        <a href="https://github.com/CourtBouillon/24joursdeweb-2022/raw/main/article.pdf">a simple PDF version of this article in French</a> üòÑ.
        If you want to have a closer look at the code, the stylesheet is
        available in <a href="https://github.com/CourtBouillon/24joursdeweb-2022/">this GitHub repository</a>.
      </p>

      <figure>
        <img src="{{ url_for('static', filename='images/00042-article-in-pdf.png') }}" alt="The article transformed in PDF" title="The article(French version) laid out" />
        <figcaption>
          The article (French version) laid out
        </figcaption>
      </figure>

    </section>

    <section>
      <h3>The Tools to Make Your Documents</h3>

      <p>
        It‚Äôs nice, we have our content inside some HTML and a nice layout inside some CSS, but
        how to generate PDF with that?
      </p>

      <p>
        <strong>There are a lot of different tools that transform HTML/CSS into PDF</strong>.
        Each tool has its strengths and its weaknesses, but all stay interoperable because they
        use the same HTML and CSS standards.
      </p>

      <p>
        Among these tools, the first one you can easily try is‚Ä¶ your browser.
      </p>
      <p>
        Printing your HTML page as PDF will, unsurprisingly, give you a PDF. This solution is really
        convenient and doesn‚Äôt require you to install something on your computer.
      </p>
      <p>
        Generating PDF files with your browser comes with some limitations. One is that your browser‚Äôs main goal is to allow
        you to browse the web. That‚Äôs its main feature (you already know that), and it explains why browsers
        are far from including all CSS properties and features specific to print, like footnotes.
      </p>
      <p>
        That‚Äôs why dedicated tools have been developed. Unlike browsers, these tools are specifically
        developed to generate paged documents and are thus more careful about paged media features.
      </p>

      <p>
        What are these tools? We can for example list <a href="https://pagedjs.org/">PagedJS</a>,
        <a href="https://vivliostyle.org/">Vivliostyle</a>, <a href="https://www.princexml.com/">PrinceXML</a>,
        <a href="https://www.pdfreactor.com/">PDFreactor</a>, <a href="https://www.antennahouse.com/">Antenna House</a>
        or <a href="https://weasyprint.org/">WeasyPrint</a>.
      </p>
      <p>
        Among these tools, some are open source and easily available:
      </p>
      <ul>
        <li>
          PagedJS is a JavaScript library that, in addition to transform your HTML/CSS into PDF, allows
          you to see the rendering directly in the browser.
        </li>
        <li>
          Vivliostyle is developed in TypeScript, can be used directly in your terminal, and also allows you to
          visualize your PDF. Vivliostyle is known to manage right-to-left and top-to-bottom
          writing modes very well.
        </li>
        <li>
          WeasyPrint is a Python library available with command line or callable from your Python application.
          It‚Äôs a tool that you really should try‚Ä¶ as we develop it‚ÄØüòâÔ∏è.
        </li>
      </ul>

      <p>
        If you want to see what these tools are able to generate, you can have a look at:
      </p>
      <ul>
        <li>
          <a href="https://pagedjs.org/made-with-paged.js.html">the books created with PagedJS</a>;
        </li>
        <li>
          <a href="https://vivliostyle.org/samples/">the books and magazines created with Vivliostyle</a>;
        </li>
        <li>
          <a href="https://weasyprint.org/#samples">the books, reports, letters and other created with WeasyPrint</a>.
        </li>
      </ul>

      <p>
        Now, you really want to try this, don‚Äôt you?
      </p>
    </section>

    <section>
      <h3>The Web Diversity</h3>

      <p>
        Creating PDF documents with web technologies is a niche, but it teems of ideas, tools, solutions.
        People from this microcosm often shares values and desires, and sometimes confront vehemently
        their antagonistic points of view. Not everyone always agrees, of course‚ÄØüòÅ, but at least things can
        move thanks to the work of the people behind standards, the tools‚Äô developers, and their users.
      </p>
      <p>
        This boiling world is world of the web as we know it, at least for now. The older readers of this article
        certainly recall the dark hours of the web at the beginning of the 2000‚Äôs, with Internet Explorer 6 and
        its 90% market shares that didn‚Äôt care of interoperability and innovation, like any other
        omnipotent ogre.
      </p>
      <p>
        The <a href="https://gs.statcounter.com/browser-market-share">actual position of Chrome</a> is getting
        closer and closer to a quasi-monopolistic situation. In the short or middle term, this may lead back
        an particularly innovative ecosystem in the torpor and the constraints enforced by a despot.
        Google shamelessly includes surveillance tools and promotes online ads in its browser.
        The company doesn‚Äôt do this out of malice, but for a simple reason: to increase their income.
        Whereas a relative balance had been found with other implementations, current trends
        (disenchantment for Firefox, use of the Chrome rendering engine by Edge and Opera) suggest that the balance
        of power doesn‚Äôt exist anymore to counter the assertive agenda of the search engine.
      </p>

      <p>
        In front of this, it appears that it‚Äôs important to continue playing the interoperability game.
        The web, and Internet in general, works well thanks to a lot of tools based on the same protocols,
        languages and formats, like TCP/IP, HTTP, HTML, CSS, JavaScript‚Ä¶ One of the strengths of these technologies
        is their multiple implementations: whether you make a static website, a REST API, a scraper, a web app
        or a streaming service, you‚Äôre able to choose between languages you like and tools you prefer.
        All of this is possible because these technologies are the product of consensuses,
        trying to focus on the user‚Äôs best interest, instead of the interest of a private actor or a
        specific public.
        <strong>And in the end, for us, participating in this consensus by developing this alternative
        usage is a modest but sincere way to help this open web to live</strong>.
      </p>
      <p>
        We‚Äôre Lucie and Guillaume, and like many people we work everyday with web technologies.
        We‚Äôd like that to continue for a long time, we‚Äôd like to be able to invent and print our content on pages,
        independently of the wishes of big actors with which we don‚Äôt necessarily share goals.
        So, at our small level, with our nice documents, with their beautiful letters and
        their harmonious colors, with our open tools and standards, with our passion and our good mood, we try
        to keep this web diversity alive üå±.
      </p>
    </section>
  </article>
{% endblock content %}

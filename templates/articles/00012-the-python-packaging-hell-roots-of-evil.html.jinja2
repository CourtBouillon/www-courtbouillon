{% set title = 'Blog - The Python Packaging Hell: the Roots of Evil' %}
{% set description = 'Managing Python packaging can sometimes be a nightmare.
        Because of the stupidity of Python maintainers? What if it was more complicated?' %}

{% extends '_layout.jinja2' %}

{% block content %}

  <article>
    <header>
      <h2>The Python Packaging Hell: the Roots of Evil (2 / 7)</h2>
      <aside><time datetime="2021-09-23">September 23, 2021</time>, by CourtBouillon</aside>
      <p>
        Managing Python packaging can sometimes be a nightmare.
        Because of the stupidity of Python maintainers? What if it was more complicated?
      </p>
    </header>

    {% include 'articles/_python_contents.jinja2' %}

    <section>
      <h3>It’s Not the Right Technology</h3>
      <p>
        <a href="{{ url_for('blog', article='00011-the-python-packaging-hell-the-can-of-worms') }}">Last time</a>,
        we saw that it’s possible to manage package creation and distribution
        nicely. We just need to look at what Rust developers do, and it doesn’t
        seem to be so complicated.
      </p>
      <p>
        That’s not totally wrong, but let’s be honest, that’s not totally true
        either. First of all, Rust has indisputable technical assets compared
        with Python: for example, the possibility to share compiled libraries
        and executable files. Python being interpreted, we have to think about
        the interpreter installation and other related questions (which
        interpreter, which version…). Tools like <a href="http://nuitka.net/">Nuitka</a> bring
        emerging solutions, but they are doomed to live outside the standard
        library without being massively used.
      </p>
      <p>
        Beyond technical aspects, the main advantage of Rust is its age. Created
        in 2010, it’s a young kid compared to the antique Python born 20 years
        earlier. Between 1990 and 2010, CVS, Subversion and Git appeared; Netscape,
        Internet Explorer, Firefox and Chrome too; and so did HTML, CSS and
        JavaScript. It’s unbelievable, but it’s true, and it puts in perspective
        the relative situations of Python and Rust.
      </p>
    </section>

    <section>
      <h3>It’s Not the Right Moment</h3>
      <p>
        It’s hard to remember or to imagine how IT was when Python started to
        germinate in the end of the 80s, but we can easily understand why
        package creation and distribution weren’t the top issues to deal with.
      </p>
      <figure>
        <img src="{{ url_for('static', filename='images/00012-netscape.png')}}" alt="Starting screen of Netscape 6" title="Only 20 seconds to start…" />
        <figcaption>
          The cute splash screen of Netscape 6, launched in 2000, the same
          year as <code>distutils</code>.
        </figcaption>
      </figure>
      <p>
        Of course, Python didn’t include tools to distribute code when it’s been
        first released. The Python Package Authority (PyPA) maintains a very
        instructive <a href="https://www.pypa.io/en/latest/history/">history</a>
        of the evolution of packaging, where we learn among other things that:
      </p>
      <ul>
        <li>
          <code>distutils</code> was integrated in the standard library in
          2000, in Python 1.6;
        </li>
        <li>
          the PyPI has been first deployed online in 2003;
        </li>
        <li>
          the PyPA has been created in 2011 to manage <code>pip</code> (born in 2008)
          and <code>virtualenv</code> (born in 2007);
        </li>
        <li>
          Python 3.3 has almost integrated the successor of <code>distutils</code> and
          <code>setuptools</code>, but the project has been abandoned because of
          a lack of investment;
        </li>
        <li>
          a huge number of PEPs about the evolution of those tools have been
          proposed and accepted.
        </li>
      </ul>
      <p>
        You’re right: it’s a mess. Whoever has used <code>easy_install</code>
        knows that the situation back then was extremely painful, and that
        installing a package required a lot of perseverance, knowledge,
        and luck of course. The accumulation of names, tools, internal and
        external libraries, shows that everyone blindly created partial, risky,
        even shaky solutions.
      </p>
      <p>
        As we can hear in
        <a href="https://www.pythonpodcast.com/pip-resolver-dependency-management-episode-264/">this excellent episode of Podcast.__init__</a>,
        these tools have for a long time been created without any specification.
        The main reason is a lack of time, but also a lack of means: there’s no company
        behind PyPI or PyPA, contrary to
        <a href="https://en.wikipedia.org/wiki/Npm_(software)#The_company"><code>npm</code></a>
        for example. Development is mostly done by volunteers, who
        wouldn’t say "no" to a helping hand ✋.
      </p>
      <p>
        Indeed, this inventory doesn’t explain everything. Other big changes have
        been integrated in the language with way more tact, like
        <a href="https://www.python.org/dev/peps/pep-0492/">coroutines</a> recently.
        This functionality required a long and stormy discussion before getting
        a rather appreciated integration. Before etching these syntax changes
        in the language,
        <a href="https://docs.python.org/3/library/asyncio-task.html?highlight=coroutine#generator-based-coroutines">less intrusive proposals</a>
        have been tested, improving the final solution approval.
      </p>
      <p>
        It’s easy to point finger at people who created those tools. It’s easy
        to scoff at the lack of view of the Python team who integrated some
        doubtful solutions in the rush, and left some of them outside the
        standard library. But if we think that <code>distutils</code> has been
        integrated at the same moment when the top browser was called Internet
        Explorer 5.5…
      </p>
      <p>
        And moreover, it’s not too late to change everything, is it?
      </p>
    </section>

    <section>
      <h3>It’s Not the Right Standard</h3>
      <p>
        In a way, unfortunately, yes, it’s too late.
      </p>
      <figure>
        <img src="{{ url_for('static', filename='images/00012-xkcd.png') }}" alt="Mandatory Related XKCD™" title="Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit." />
        <figcaption>
          The mandatory <a href="https://xkcd.com/927/">XKCD</a>
        </figcaption>
      </figure>
      <p>
        The issue is that, since the beginning of the 2000s, packages have been
        released in the wild, on PyPI, in public and private repositories.
        These packages are used by a lot of people, and sometimes by obsolete
        systems (we’re still looking askance at you, Python 2). And Python,
        which has painfully suffered from rough and incompatible changes (we’re
        really thinking about you, Python 3) won’t make this loads of packages
        uninstallable.
      </p>
      <p>
        Otherwise, pitchforks and guillotines will be out and about.
      </p>
      <p>
        All those proposals, about files
        (<code>requirements.txt</code>, <code>setup.py</code>,
        <code>Pipfile</code>, <code>setup.cfg</code>,
        <code>pyproject.toml</code>…) or about tools
        (<code>easy_install</code>, <code>pip</code>, <code>pipenv</code>,
        <code>poetry</code>, <code>setuptools</code>, <code>distutils</code>…)
        have just been added one after the other, with no perfect replacement, without
        shelving the faults of their ancestors.
      </p>
      <p>
        But of course, everything is not lost. The most important changes are
        globally pointing to systematic specification, rationalization and
        simplification. A lot of PEPs are proposed to describe and discuss
        before coding, so that implementation details don’t prevail over ideas
        born out of consensuses.
      </p>
      <p>
        But the path is long.
      </p>
    </section>

    <section>
      <h3>It’s Not the Right Solution</h3>
      <p>
        If you think that dependency management has been solved for
        a long time, and that the people behind <code>pip</code> seriously lack
        important skills, don’t forget that the name of a Python package is
        often given in the <code>setup.py</code> file, and can thus
        theoretically depend of various information like the OS, the presence
        of external libraries, or even the current time. Listing libraries
        needed by a package sometimes requires to launch an interpreter, and so
        the dependencies tree is different for each installation.
      </p>
      <p>
        In practice, solutions have been found to make up for this flexibility,
        which is sometimes a real nightmare. Fortunately, downloading and
        launching all the different versions of a package is not mandatory to
        determinate which ones are required for the installation. But
        everything is done with new formats and new metadata that are, by
        definition, not part of the previous packages.
      </p>
      <p>
        In concrete terms, managing obsolete installation tools will be
        required for a long and painful time. The wild rythm of new versions of
        <a href="https://pypi.org/project/setuptools/#history"><code>setuptools</code></a>
        and
        <a href="https://pypi.org/project/pip/#history"><code>pip</code></a>
        gives an idea of constant improvements brewing without us
        realizing; but we’re not ready to discard the fiendish history we’ll
        have to cart around for a long time.
      </p>
      <p>
        However, for packagers, the situation is getting better. The topic
        isn’t really appealing and it’s hard to find a reference documentation
        (even from PyPA, especially from PyPA). It’s a pity, because it’s
        becoming almost easy and neat to create Python packages.
      </p>
      <p>
        With no <code>setup.py</code>, for example.
      </p>
      <p>
        You’d like to learn more? There are five articles left to take a look
        at existing tools, to finely define what we want to do, before finally
        creating our own beautiful package.
      </p>
      <p>
        <a href="{{ url_for('blog', article='00013-the-python-packaging-hell-delusions-of-formats') }}">
          To be continued…
        </a>
      </p>
    </section>
  </article>

{% endblock content %}

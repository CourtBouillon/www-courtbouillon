{% extends '_layout.jinja2' %}

{% block content %}

  <article>
    <header>
      <h2>The Python Packaging Hell: The Minimal Solution (7 / 7)</h2>
      <aside><time datetime="2021-12-09">December 9, 2021</time>, by CourtBouillon</aside>
      <p>
        Here we are. We untied knots, dug down to the roots, dissected formats,
        scattered files, opened a toolbox and defined needs. Maybe we can now
        think about making a package!
      </p>
    </header>

    {% include 'articles/_python_contents.jinja2' %}

    <section>
      <h3>Where Do We Put What?</h3>
      <p>
        We saw in
        <a href="{{ url_for('blog', article='00017-the-python-packaging-hell-the-expression-of-needs')}}">the previous article</a>
        what we can put in our packages. That’s a lot of stuff to include, but
        we haven’t really defined where or how we can include it.
      </p>
      <p>
        As this article is just an example among others, we won’t have any
        qualms to propose purely subjective opinions based on a peculiar
        sensitivity. It’s not the absolute truth, it’s just an opinion. But, of
        course, as it’s our own, it’s a good one, otherwise you would be
        reading something else.
      </p>

      <h4>The Wheel Package</h4>
      <figure>
        <img src="{{ url_for('static', filename='images/00019-xkcd.png')}}" alt="Mandatory Related XKCD™" title="Right now it's a bicycle wheel, so we've had to move to lighter vehicles, but the reduced overhead is worth it. There was one week when a wheel of cheese got dangerously close to the first page, though." />
        <figcaption>
          The mandatory <a href="https://xkcd.com/2140/">XKCD</a>. And if the
          build of your wheel fails, don’t give up, the turning-wheel will turn.
        </figcaption>
      </figure>
      <p>
        The wheel package is the level 1 of packaging. It’s not only the
        simplest to create, but also the one that’ll be the most used.
      </p>
      <p>
        The goal of this package is to provide the functional code already ready
        for the target. The <code>pip</code> command that will install it will
        have nothing to do apart from decompressing the archive, retrieving
        some information (like dependencies) and putting the decompressed
        folder on the disk. No compilation, no arbitrary Python code execution,
        no special case for a particular platform.
      </p>
      <p>
        Incidentally, this means that if your code isn’t the same depending on
        the Python version or the operating system, you’ll have to create a
        different package for each combination on which your creation will be
        installed. So, you’ll have to work a little bit.
      </p>
      <p>
        It doesn’t matter: we have all the tools we need to do that. What is
        important is to agree on what we want to put inside. On this subject,
        our opinion is simple: code, metadata, and maybe one or two files like
        the <code>README</code> or the license.
      </p>
      <p>
        Nothing else.
      </p>
      <p>
        No need to cry. Who installs a wheel to look inside at the
        <code>CHANGELOG</code>? Who installs a wheel to launch unit tests? Who
        installs a wheel to rebuild the documentation of the module? If you
        already did that, the time has come for you to discover an amazing tool
        called Internet. It’s full of nice pages presenting the documentation
        with colors, pictures and even links.
      </p>
      <p>
        More seriously: the only purpose of wheels is to be installed. No
        matter how they work, what they contain, the most important thing is
        that their installation works properly with <code>pip</code>.
        Everything else is secondary. Really. Goodbye tests, goodbye
        documentation, goodbye configuration files.
      </p>

      <h4>The Source Package</h4>
      <p>
        Sources are the basis, the alternative, the last resort, the ultimate
        comprehensiveness, and that’s why wheels will never send into oblivion
        this venerable format that has been supported by Python users since the
        beginning of package sharing.
      </p>
      <p>
        Before defining what we’ll put inside, let’s settle a crucial issue
        right away: what will our source package be really used for?
        The answer is simple:
      </p>
      <ol>
        <li>
          reading sources,
        </li>
        <li>
          creating packages for other package managers (for example, for
          Linux distributions),
        </li>
        <li>
          installing packages, for hopeless cases.
        </li>
      </ol>
      <p>
        For these cases, it’s often useful to have more information than what’s
        included in the wheel. We like to have some files to discover changes
        between versions, some tests to see how it works, some documentation
        that can be read with a text editor… We may want to see how the package
        is configured, to play with the <code>setup.py</code> file, or even
        to try to modify the code.
      </p>
      <p>
        So, the source package will contain more or less the same content as
        the versioned repository. We have, on broad terms, to retrieve what
        we’d retrieved with <code>git clone</code> (or the equivalent command
        of your favorite version control software, no offense). Of course,
        we’ll remove the versioning data and some details like the CI
        configuration.
      </p>

      <h4>Let’s Go</h4>
      <p>
        With all these details, we’re now able to venture into package
        creation. We won’t explain each line of configuration or code to write,
        but we’ll try, at least, to lay the necessary foundation for the
        creation of your packages.
      </p>
    </section>

    <section>
      <h3>Simple Package, Simple Solution</h3>
      <figure>
        <img src="{{ url_for('static', filename='images/00019-hammer.jpg')}}" alt="A hammer" title="If I had a hammer…" />
        <figcaption>
          Want to drive a nail? Use a hammer! This tool is perfect to drive
          nails, and… that’s all in fact. It drives nails, that’s all it does,
          but it does that well.
        </figcaption>
      </figure>
      <p>
        We’ll get rid, with only a few words, of a huge unspoken fact that
        clutters us. You want to build a package? Let’s say that your code
        contains only Python, and that you want to follow the rules we’ve
        settled before. There, it’s already better.
      </p>
      <p>
        Do we agree? Otherwise you can console yourself with another article,
        somewhere on Internet, about <code>setuptools</code>. We leave that to
        you.
      </p>

      <h4>The Tool</h4>
      <p>
        Without further suspense, the tool we’ll use is
        <a href="https://flit.readthedocs.io/">Flit</a>.
      </p>
      <p>
        Flit is the hammer of package creation. It’s limited, it only does one
        thing, but it’s clear, limpid, efficient. We want to create and share
        packages with simple and foolish rules, that’s all.
      </p>
      <p>
        Flit is also one of the tools behind
        <a href="https://www.python.org/dev/peps/pep-0517/">PEP 517</a> and
        <a href="https://www.python.org/dev/peps/pep-0517/">PEP 518</a>. Yes,
        it’s thanks to its creator Thomas Kluyver that now we can be free from
        <code>setuptools</code> and <code>setup.py</code>. Respect.
      </p>
      <p>
        Flit is simplicity above all. If you don’t want to ask questions about
        package creation, if you don’t want to write more code than your
        module, it’s the choice of reason.
      </p>

      <h4>The Architecture</h4>
      <p>
        Forget the tons of files and endless configurations. Here, we aim
        simplicity, we’ll have to eradicate the obesity of root folders. We’re
        going to drastically lighten the home page of your repository.
      </p>
      <p>
        In the past, we took examples of
        <a href="{{ url_for('blog', article='00015-files-everywhere') }}">staggering overdoses</a>.
        Without going back into all the projects we’ve already talked about,
        let’s take only one example of what we don’t want:
        <a href="https://github.com/psf/requests/tree/v2.24.0">Requests</a>.
      </p>
      <p>
        (Requests isn’t the ultimate evil, don’t make us say what we didn’t
        write. It’s just a good example of want we don’t want.)
      </p>
      <p>
        The root folder contains 22 files and folders. Among them, we find the
        usual suspects of package creation: <code>setup.py</code>,
        <code>setup.cfg</code>, <code>MANIFEST.in</code>, <code>Pipfile</code>…
        We also find nice configuration files for third-party tools: Tox,
        Coverage, Pytest. Some metadata, some folders, here’s something to
        impress a person who would like to use this famous project as an
        example to understand how Python modules work.
      </p>
      <p>
        In contrast to this project, we suggest 6 basic folders and files to
        include at the root of your folder:
      </p>
      <ol>
        <li>the folder containing the code of your project,</li>
        <li>a <code>doc</code> folder,</li>
        <li>a <code>tests</code> folder,</li>
        <li>a <code>LICENSE</code> file,</li>
        <li>a <code>README</code> file,</li>
        <li>a <code>pyproject.toml</code> file.</li>
      </ol>
      <p>
        Of course, this is only a basis that you can adapt to your needs. But
        restricting ourselves to keep a light and clean root folder is also a
        good reason to think about the hygiene and the structure of projects.
        Let’s see what we can put in these little boxes…
      </p>

      <h4>The Folders</h4>
      <p>
        In the folder containing the code of your project, you’ll first put…
        the code of your project. This seems to be obvious, but if we follow
        our idea of having a minimal wheel, we quickly understand that this
        folder will be the one ready to be decompressed. For the simple goal of
        installing the module, the rest is just decoration.
      </p>
      <p>
        A consequence of this division is that this folder has to include the
        additional files required for the module. Pictures for your game?
        Include them in this folder. A lists of famous passwords for your NSA
        hacking tool? Include them in this folder.
      </p>
      <p>
        That also explains why we don’t include tests or documentation in this
        folder. Everybody knows that tests and documentation are useless when
        the code is limpid and bug-free. However, in doubt, until all humans are
        omniscient, we could keep these relics, but only in the source package.
      </p>
      <p>
        Tests, if they follow the naming conventions of your favorite tool,
        will be automatically discovered. For this purpose, <code>tests</code>
        seems to be an appropriate name, for humans and for tools (Flit or
        Pytest, for example). Then, up to you to organize your tests as you
        want, but you’ll help everyone by putting them in the same folder, at
        the root of your project.
      </p>
      <p>
        The documentation has, also, good reasons to be put in the source
        package. You give to the curious people the possibility to dig into the
        clear explanations about your project, next to your code, without
        Internet access requirement. You give to the Linux distributions the
        possibility to include an appreciable introduction to your tool, but
        also to optional manual pages. In fact, you give the possibility to
        anyone to do anything with content that helps people, and in this case
        you can never be safe from pleasant surprises.
      </p>
      <p>
        This documentation is also the perfect place to store some information
        that we may want to put in the root, like a <code>CHANGELOG</code> or
        configuration samples. So, they’ll be available in a pleasant format,
        in addition to text files. Code hosting platforms also offer dedicated
        pages to some of this information, so that a lot of root files become
        unnecessary. Nothing stops you, if you really want to, to put links
        into your <code>README</code> file to guide people who only look at
        the root folder.
      </p>

      <h4>The Files</h4>
      <p>
        The <code>README</code> file is the basis of your project. In pure text
        format or with a light markup, it’s the entry point of the majority of
        people interested in code. There’s also a good chance that the file is
        brought to the fore by your software forge and by PyPI.
      </p>
      <p>
        That’s a good reason to work on your <code>README</code> file. Beyond
        the project description, you have to point all the necessary
        information we like to quickly have when we discover a project: the
        license, the supported versions of Python, the way to contact people
        taking care of the project…
      </p>
      <p>
        By the way, putting the license at the root of the project, in a
        specific file, is very classic but questionable. After all, couldn’t
        this legal information be in the documentation? Wouldn’t a line in the
        <code>README</code> be enough to indicate which license applies to the
        project?
      </p>
      <p>
        Yes, probably. But many tools expect to find this file at the root, and
        some of them even read it to deduct the license of the project. If it’s
        easy to change the habits of people, who’ll be happy with an indication
        in the documentation, it’s more complex to change the habits of
        machines. So… Let’s say this choice is a small agreement between ideals
        and reality. Let’s work to ensure that in some years we can get rid of
        this more simply.
      </p>
      <p>
        At last, the main dish: <code>pyproject.toml</code>.
        This file allows you to indicate
        <a href="https://flit.readthedocs.io/en/latest/pyproject_toml.html?highlight=pep#build-system-section">everything required to create a package</a>.
        The default choices of Flit being really good (objectively), you
        shouldn’t need to change a lot of things to the proposed values. But
        you should know that if you want to, you’ll find a long list of options
        that will satisfy all your crazy ideas.
      </p>
      <p>
        With Flit, <code>pyproject.toml</code> is going to replace what you can
        do with (at least) <code>setup.py</code>, <code>setup.cfg</code>,
        <code>requirements.txt</code> and <code>MANIFEST.in</code>. Of course,
        possibilities are limited, just because you can’t write Python code to
        commit atrocities executed during the creation or the installation of a
        package. But it’s not a limitation, it’s a feature: stop playing with
        this idea, interesting at the beginning but becoming more than filthy.
        It may be more useful for the posteriority to write your module.
      </p>
      <p>
        This file will also allow you to configure
        <a href="https://github.com/carlosperate/awesome-pyproject">most of</a>
        the third-party tools you use: Tox, Black, Pytest, Coverage.py, isort,
        Pylint… Yes, it means that you can say goodbye to this pile of
        configuration files, each using its own naming conventions and formats!
        The list of supported tools is getting bigger, don’t hesitate to have a
        look time to time to see if your favorite project dared to take the
        plunge.
      </p>

      <h4>From Creation To Deployment</h4>
      <p>
        Don’t expect a tutorial where we hold your hand, write your
        configuration files, and give you all the tricks to use Flit. The title
        of the article isn’t "7 things you don’t know about Flit—the
        5<sup>th</sup> one will surprise you."
      </p>
      <p>
        Why? Simply because the
        <a href="https://flit.readthedocs.io/en/latest/">Flit’s documentation</a>
        is amazing. You’ll find all you need to install and use Flit (almost)
        blindly. It’s limpid, it’s quick, and mainly it works.
      </p>
      <p>
        <code>init</code>, <code>install</code>, <code>build</code>,
        <code>publish</code>. It’s all you need to model you little package
        with love. No more need to suffer our derogatory prose, we leave you
        among the delicate words of a delicate tool.
      </p>
      <p>
        Enjoy flying on your own, let the wind .
      </p>
      <figure>
        <img src="{{ url_for('static', filename='images/00019-ostrich.jpg')}}" alt="Ostriches" title="You always dreamed of having wings? Wish granted!" />
        <figcaption>
          Yes, ostriches. When you don’t find a picture of a butterfly or a
          dragonfly, you do what you can…
        </figcaption>
      </figure>
    </section>

    <section>
      <h3>Finally…</h3>
      <p>
        Don’t lie to ourselves: Flit doesn’t solve everything. We already saw
        its limitations and its small wicknesses, but unfortunately there’s
        more.
      </p>
      <p>
        Do you want another tool?
        <a href="https://python-poetry.org/">Poetry</a> can do the same as Flit,
        but it does more: managing virtual environments, solving dependencies,
        installing packages, numbering versions… If you like all-in-one tools
        that avoid the pitfall of becoming a tentacled and megalomaniac
        behemoths impossible to maintain (we won’t give names), you can find
        in Poetry an elegant substitute to Pipenv (oops, sorry).
      </p>
      <p>
        But… whether it’s on Flit or Poetry, there’s a big shadow: abandonment.
        Flit and Poetry are widely used, but they stay third-party tools that
        aren’t as supported as <code>setuptools</code> is. As well
        as many open-source projects, they already go through some
        <a href="https://github.com/takluyver/flit/issues/283">problems</a>,
        and there will be other ones.
      </p>
      <p>
        Fortunately, PEPs are now widely adopted, leaving the door open to
        other future tools. Out of the shackles of <code>setuptools</code>, we
        can use other tools based on <code>pyproject.toml</code>. The keys and
        the values of options will change, but at least we won’t need to depend
        on a unique implementation stuck by the weight of legacy and the need
        of backwards compatibility.
      </p>
      <p>
        Wheels are wheels, sources are sources, and they lived happily ever
        after.
      </p>
      <p>
        Tools change, but formats remain.
      </p>
    </section>
  </article>

{% endblock content %}

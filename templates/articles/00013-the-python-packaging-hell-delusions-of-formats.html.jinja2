{% set title = 'Blog - The Python Packaging Hell: Delusions of Formats' %}
{% set description = 'Managing Python packaging can sometimes be a nightmare. But
        by the way, what is a package? Obviously, as nothing is simple, as nothing
        will be spare, the non-answer to this question is: it depends‚Ä¶' %}
{% set image = url_for('static', filename='images/00007-image.jpg') %}

{% extends '_layout.jinja2' %}

{% block content %}

  <article>
    <header>
      <h2>The Python Packaging Hell: Delusions of Formats (3‚ÄØ/‚ÄØ7)</h2>
      <aside><time datetime="2021-09-30">September 30, 2021</time>, by CourtBouillon</aside>
      <p>
        Managing Python packaging can sometimes be a nightmare. But
        by the way, what is a package? Obviously, as nothing is simple, as nothing
        will be spare, the non-answer to this question is: it depends‚Ä¶
      </p>
    </header>

    {% include 'articles/_python_contents.jinja2' %}

    <section>
      <h3>A Package?</h3>
      <p>
        If you‚Äôre here, you may have already installed a Python package in your
        life. You may have used a virtual environment, used <code>pip</code> or
        installed a module proposed by your distribution. Be that as it may, you
        probably succeeded, in a way or an other, to put Python libraries somewhere
        on your computer.
      </p>
      <figure>
        <img src="{{ url_for('static', filename='images/00007-pypi.svg')}}" alt="PyPI‚Äôs logo" title="What a nice packages" />
        <figcaption>
          It‚Äôs tempting, a nice Python package. But in real life‚Ä¶
        </figcaption>
      </figure>
      <p>
        First, when we talk about Python package, we should be clear. And it‚Äôs
        not easy, because it doesn‚Äôt exist only one format, but a swarm of them.
      </p>
      <p>
        (Caution: we haven‚Äôt a vocation to do an exhaustive presentation, and so
        we‚Äôre not going to have a look to all the things that existed and still
        exist (<a href="https://docs.python.org/3/distutils/builtdist.html">a
        small insight to satisfy your curiosity</a>). We‚Äôll also use some shortcuts
        that will take some liberties with the truth, just to give a chance to
        the article to be a minimum readable and easily digestible.)
      </p>

      <h4>Sources</h4>
      <p>
        The easiest way to distribute code, it‚Äôs to transform it in a archive and send
        it as it is. That‚Äôs more or less what happens when we choose to create
        a source package for a Python module.
      </p>
      <p>
        As simple it is, this method requires a bit of configuration. We have to
        determinate which files are included in the archive, including metadata
        and third-party tools (Tox, Coverage, Pytest‚Ä¶) configuration files.
      </p>
      <p>
        So this archive is quite simple to create, but it brings kind of big
        problem: there is no particular structuring, no organization for the
        metadata. It gives the files and allow to the installer to install them
        like it would do it with a folder containing the sources on your hard drive.
      </p>
      <p>
        And so, you‚Äôd say? Well, without seeming, this limitation is absolutely
        terrible, in many respects.
      </p>
      <p>
        First thing, it‚Äôs the dependencies management. Packages depend of other
        packages, as you may know. And without any other metadata, the installer
        is obliged to read, for example, the file <code>setup.py</code>. And now,
        you have an insight of the problem: if we need to execute a Python file
        to know the dependencies of a package (and recursively its dependencies!)
        you‚Äôre going to spend a lot of time downloading packages, executing code,
        solving dependencies, downloading, executing, solving, downloading‚Ä¶
        In short: dependencies solving can‚Äôt be solved from a simple static tree,
        all the nodes are dynamics. And if you‚Äôre wondering: yes, this is hell.
      </p>
      <p>
        It doesn‚Äôt stop here. The installation, also, requires code execution,
        as it depends of the <code>setup.py</code> file. For simple Python in
        simple packages, it‚Äôs not that annoying, but it‚Äôs an other story as we
        need to compile C for example. The user is forced to install the
        required tools for the installation of all the things specific to the
        operating system or the Python version. That‚Äôs complex for the users,
        and it‚Äôs a non-ending spring of bugs.
      </p>
      <p>
        Despite its limitations, this format will probably stay necessary for a
        long time. For a lot of reasons, we may want to get the source in the
        simplest format. Disastrous consequence: the tools for Python packages
        installation will have to deal with this format, and all the complex
        mechanism driving by it, for very long years.
      </p>

      <h4>Egg</h4>
      <p>
        To make up for those failings, a package format has been created in 2004:
        the eggs.
      </p>
      <p>
        Besides the
        <a href="https://en.wikipedia.org/wiki/Spam_(Monty_Python)#Menu">classic reference to Monty Python</a>,
        the idea comes from a
        <a href="http://peak.telecommunity.com/DevCenter/PythonEggs#overview">good
        intention</a>: building additional information which allow to the
        dependencies of a project to be checked and satisfied at the execution.
        At the time, this format allows above all to use <code>easy_install</code>
        to easily install a module and its dependencies. It allows to include
        plug and play modules, with C extensions already compiled. It also allows,
        by a system of namespaces, to distribute plugins. And, above all, it can
        directly put itself in a place accessible for Python, without needed
        additional installation.
      </p>
      <p>
        Build above <code>setuptools</code>, it brings a lot of evolutions that
        seems obvious today: dependencies with fixed versions, precomputed
        metadata, mechanism to access related metadata and files from the
        code of the module‚Ä¶
      </p>
      <p>
        Awesome üéÜüëèüêàüòç.
      </p>
      <p>
        Yet, eggs are quickly outmoded by their architecture as innovative (it‚Äôs
        a joke, it‚Äôs totally copied from Java‚Äôs jars) as totally rickety (that,
        however, it‚Äôs not a joke). Use an archive format where we needn‚Äôt to
        extract the code make errors management very complex, with traces
        leading to untraceable files. Bytecode inclusion makes eggs potentially
        depend of a Python version, like the inclusion of compiled files make
        them deeply linked to an architecture.
      </p>
      <p>
        And especially‚Ä¶ The format isn‚Äôt specified, giving to the implementation
        an immoderate importance. The successive adds to <code>setuptools</code>,
        sometimes badly or not at all documented, make it a big Russian roulette
        game where retro-compatibility, reproducibility and simplicity are
        constantly, blithely, mercilessly neglected. The ways to make eggs
        usable by the interpreter have been expended to deal with cases more and
        more complex, until becoming to big pile of solutions based on symbolic
        links, files containing absolute paths, archives temporarily extracted
        and other abominations that we‚Äôll wisely leave in their Pandora‚Äôs box.
      </p>

      <h4>Wheel</h4>
      <p>
        After this little youthful indiscretion, that all in all make losing mind
        to every person equipped with a normal brain, a PEP appeared to make
        everyone come to an agreement: the
        <a href="https://www.python.org/dev/peps/pep-0427/">PEP 427</a>
        bringing in wheels.
      </p>
      <p>
        Wheels are, at the beginning in 2012, a wholesome evolution of eggs to
        the effect that they take back the good ideas without keeping the
        abominations. Finally, we have a nice specification, which will got a lot
        of improvements also specified, and which will allow to many tools to
        work together without depending of implementation details.
      </p>
      <p>
        The amazing idea (without really exaggerate) of wheels is to include in
        the filename some information, considerably simplifying dependencies
        management. Is the code to include different depending of the Python
        version? Are the extensions compiled differently depending the operating
        system? So we distribute different wheels for the same version of a module,
        and the installer will deal with that to find the version corresponding
        to the user.
      </p>
      <p>
        The wheels have also the good idea to embed metadata with a specified
        format (by the <a href="https://www.python.org/dev/peps/pep-0345/">PEP 345</a>).
        This format allows to describe in a complex way the conditional
        dependencies, the external dependencies, the Python versions supported,
        and more globally all we need to correctly manage code distribution, the
        easy installation and the possibility to build a static dependencies
        tree.
      </p>
      <p>
        Nowadays, everyone should use wheels to distribute and install packages. If
        not everything is perfect in Python packages management, wheels are today
        the most significant example of what works very well. They allow a
        smooth transition to have a situation where eggs have widely disappeared,
        and where source packages are less and less used‚Ä¶ thanks to a software
        ecosystem created around this new format and a clever retro-compatibility.
      </p>
      <p>
        Yes, wheels are amazing, but all of that wouldn‚Äôt be possible without
        the preliminary arrival of <code>pip</code>, in 2008, meant for replace
        <code>easy_install</code>. But don‚Äôt go too fast! We‚Äôll have time to
        come back to this a little later, in our next articles‚Ä¶
      </p>
      <p>
        To be continued‚Ä¶
      </p>
    </section>
  </article>

{% endblock content %}
